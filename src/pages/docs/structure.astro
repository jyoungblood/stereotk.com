---
import Layout from "../../layouts/Docs.astro";
---

<Layout title="Structure - STEREO Internet Toolkit">
  <article style="margin-top: -1px;">
    <h2 id="structure" class="mt0">Structure</h2>

    Application Overview & structure<br /><br />

    stereo looks at the [architecture?] differently from MVC frameworks<br /><br
    />
    instead of MVC architecture, we're focused on routes and views. no models, no
    controllers (although you're welcome to do that kind of thing if you want) it's
    like express, catch the request, do whatever logic, return the response
    <br /><br />
    <b>RV (route view) architecture</b><br />
    based on slim, which gives us a lot "for free" and is flexible enough to support
    this workflow
    <br /><br />
    comfortable if you're coming from the JS world (feels like express)
    <br /><br />
    BYO db (if you want to do models & migrations, that's fine) (same for controllers,
    tests, etc)
    <br /><br />

    ?? RVBL FW? - focus on business logic, routing, and views

    <br /><br />



    <br /><br />

    embracing "zero config" ideology as much as possible. MOST settings should
    be in the .env file for now, but you can set any other settings (php_ini,
    timezone, etc) in the settings.php file ... it's a blank canvas.
    <br /><br />
    sensible defaults so you don't have to make thee decisions, but you have the
    ability to change if you want.
    <br /><br />

    You'll notice this structure doesn't follow the [standard php package]
    format. focus on being easy to understand, will feel familiar if you've used
    express.

    <pre><code>
├── app                     # 
│   ├── routes              # 
│   │   └── index.php       # 
│   ├── settings.php        # 
│   └── stereo.php          # 
├── logs                    # 
├── node_modules            # 
├── public                  # 
│   ├── cache               # 
│   ├── css                 # 
│   ├── images              # 
│   ├── js                  # 
│   └── views               # 
├── vendor                  # 
├── .env.example            # 
├── .gitignore              # 
├── composer.json           # 
├── composer.lock           # 
├── LICENSE.md              #
├── package-lock.json       # 
├── package.json            # 
├── README.md               #  
└── tailwind.config.json    # 
</code></pre>

<!-- from the old readme -->

<!-- organization - folders for css, js, images, templates, and routes -->

<!-- - Blank CSS and JS placeholder files -->

<!-- - [.env](https://github.com/jyoungblood/stereo/blob/master/.env.example) - helpful basic variables and settings, pre-wired with [phpdotenv](https://github.com/vlucas/phpdotenv) -->

<!-- - [index.php](https://github.com/jyoungblood/stereo/blob/master/index.php) - initialized Slim application w/ middleware, db connection, and default 404 configuration -->

<!-- - [.htaccess](https://github.com/jyoungblood/stereo/blob/master/.htaccess) - routes all non-file urls to index, forces https, and uses gzip for static assets (if available) -->

<!-- - [.gitignore](https://github.com/jyoungblood/stereo/blob/master/.gitignore) - ignores `/vendor`, `.env`, `.vscode`, `error_log`, and `.DS_Store` -->





    People ask me all the time: But where are the models? What about migrations?
    Are there seriously no controllers? What about queues? workers? scheduled
    tasks? tests? What the fuck is wrong with you?<br /><br />

    If these things matter to you, you should probably look elsewhere. Maybe
    check out Laravel? It's great, and it has EVERYTHING. [there's a lot you get
    FOR FREE that you won't get for free here] ... There are like a million MVC
    frameworks in general, STEREO has a fundamentally different approach.<br
    /><br />

    Focused on a very specific workflow (route & templates rule everything),
    being lean & scrappy, very simple architecture (easy to understand), with
    build tools pre-configured.<br /><br />

    note on security - aim to provide a resasonably secure and usable (reliable)
    application, but not going super deep with security measures
    <br /><br />
    <br /><br />
    <br /><br />
    <br /><br />
    other stuff<br />
    - containers - yeah we got 'em, who cares?. more info: <a
      href="https://www.slimframework.com/docs/v4/concepts/di.html"
      >slim4 container docs</a
    ><br />

    - settings.php has all the container stuff right now. nice. add your own stuff or whatever, i haven't done a whole lot with it so i don't really have any strong opinions on the matter.<br /><br />

    <!-- example using settings variables from the container, do this is your route: -->

    <!-- 
      $settings = $this->get('settings');
      $settings['test_setting'] = 'baseball';
      $this->set('settings', $settings);

        $test_settings = $this->get('settings');
        print_r($test_settings); -->

    - middleware! - it's all in middleware.php, put your stuff here! more info: <a
      href="https://www.slimframework.com/docs/v4/concepts/middleware.html"
      >slim4 middleware docs</a
    ><br />

    <!--
      <pre
    >
      <code>
        . ├── build # Compiled files (artifacts) ├── config # Configuration
        files ├── docs # Documentation files ├── logs # Log files ├── public #
        Web server files ├── resources # Other resource files │ ├── migrations #
        Database migration files │ ├── seeds # Data seeds │ └── translations #
        The .po message files for PoEdit ├── src # PHP source code (The App
        namespace) │ ├── Action # Controller actions (HTTP layer) │ ├── Console
        # Console commands │ ├── Domain # The core application │ ├── Renderer #
        Render and Url helper (HTTP layer) │ ├── Middleware # Middleware (HTTP
        layer) │ └── Support # Helper classes and functions ├── templates # HTML
        templates ├── tests # Automated tests ├── tmp # Temporary files ├──
        vendor # Reserved for composer ├── build.xml # Ant build tasks ├──
        composer.json # Project dependencies ├── LICENSE # The license └──
        README.md # This file
      </code>
    </a>
    -->
  </article>
</Layout>
